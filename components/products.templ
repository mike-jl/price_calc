package components

import (
	"fmt"
	"github.com/mike-jl/price_calc/db"
	"strconv"
)

templ ProductsTable(products []db.ProductWithCost, categories []db.Category) {
	<section class="section hero is-info custom block">
		<div class="container">
			<div class="hero-body p-0">
				<form
					hx-put="/product"
					hx-swap="beforebegin"
					hx-target="#product-table-end"
				>
					<div class="field">
						<label class="label">New Product</label>
						<div class="field has-addons">
							<div class="control">
								<input class="input" type="text" placeholder="Name" name="name"/>
							</div>
							<div class="control">
								<span class="select">
									<select name="category-id">
										for _, category := range categories {
											<option value={ strconv.FormatInt(category.ID, 10) }>{ category.Name }</option>
										}
										<option selected hidden disabled>Category</option>
									</select>
								</span>
							</div>
							<div class="control">
								<button class="button is-success" type="submit">
									Add
								</button>
							</div>
						</div>
					</div>
				</form>
			</div>
		</div>
	</section>
	<section class="section">
		<div class="product-row container">
			for _, product := range products {
				@ProductRow(product, categories)
			}
		</div>
		<div id="product-table-end"></div>
	</section>
}

templ ProductRow(product db.ProductWithCost, categories []db.Category) {
	<div class="block">
		<div class="columns is-align-items-flex-end">
			<div class="column">
				<div class="field">
					<label class="label is-hidden-tablet product-label">Name</label>
					<div class="control">
						<input class="input" type="text" value={ product.Product.Name } disabled/>
					</div>
				</div>
			</div>
			<div class="column">
				<div class="field">
					<label class="label is-hidden-tablet product-label">Category</label>
					<div class="control is-expanded">
						<div class="select is-fullwidth">
							<select disabled>
								for _, category := range categories {
									<option value={ fmt.Sprintf("%d", category.ID) } selected?={ category.ID == product.Product.CategoryID }>{ fmt.Sprintf("%s (%d%%)", category.Name, category.Vat) }</option>
								}
							</select>
						</div>
					</div>
				</div>
			</div>
			<div class="column">
				<div class="field">
					<label class="label is-hidden-tablet product-label">Gross Price (calculated)</label>
					<div class="field has-addons">
						<p class="control is-expanded">
							<input
								class="input"
								type="text"
								disabled
								value={ fmt.Sprintf("%.2f", product.Cost*product.Product.Multiplicator*(1.0+(float64(getCategoryFromId(product.Product.CategoryID, categories).Vat)/100.0))) }
							/>
						</p>
						<p class="control">
							<a class="button is-static">€</a>
						</p>
					</div>
				</div>
			</div>
			<div class="column">
				<div class="field">
					<label class="label is-hidden-tablet product-label">Price (real)</label>
					<div class="field has-addons">
						<p class="control is-expanded">
							<input
								class="input"
								type="text"
								disabled
								value={ fmt.Sprintf("%.2f", product.Product.Price) }
							/>
						</p>
						<p class="control">
							<a class="button is-static">€</a>
						</p>
					</div>
				</div>
			</div>
			<div class="column  responsive-buttons">
				<a
					id="product-modal-button"
					class="button is-link"
					href={ templ.URL(fmt.Sprintf("/product/%d/edit", product.Product.ID)) }
				>
					Edit
				</a>
			</div>
		</div>
	</div>
}

func getIngredientFromId(id int64, ingredients []db.IngredientWithPrices) db.IngredientWithPrices {
	for _, ingredient := range ingredients {
		if ingredient.Ingredient.ID == id {
			return ingredient
		}
	}
	return db.IngredientWithPrices{}
}

func getCategoryFromId(id int64, categories []db.Category) db.Category {
	for _, category := range categories {
		if category.ID == id {
			return category
		}
	}
	return db.Category{}
}
