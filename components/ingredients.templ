package components

import (
	"fmt"
	"github.com/mike-jl/price_calc/db"
	"github.com/mike-jl/price_calc/services"
)

templ IngredientsTable(ingredients []db.IngredientWithPrices, units services.UnitsMap, products map[int64]string) {
	<section class="section hero is-info custom block">
		<div class="container">
			<div class="hero-body p-0">
				<form hx-put="/ingredient" hx-swap="afterbegin" hx-target="#ingredient-table-body">
					<div class="field">
						<label class="label">New Ingredient</label>
						<div class="field has-addons">
							<div class="control">
								<input class="input" type="text" placeholder="Ingredient Name" name="name"/>
							</div>
							<div class="control">
								<button class="button is-success" type="submit">
									Add
								</button>
							</div>
						</div>
					</div>
				</form>
			</div>
		</div>
	</section>
	<section class="section">
		<div class="product-row container" id="ingredient-table-body">
			for _, ingredient := range ingredients {
				@IngredientRow(ingredient, units, products)
			}
		</div>
	</section>
}

templ IngredientRow(ingredient db.IngredientWithPrices, units services.UnitsMap, products map[int64]string) {
	<div class="block">
		<div class="columns  is-align-items-flex-end">
			<div class="column">
				<div class="field">
					<label class="label is-hidden-tablet product-label">Name</label>
					<div class="control">
						<input class="input" type="text" value={ ingredient.Ingredient.Name } disabled/>
					</div>
				</div>
			</div>
			<div
				class="column"
			>
				<div class="field">
					<label class="label is-hidden-tablet product-label">Type</label>
					<div class="control is-expanded">
						<div class="select is-fullwidth">
							<select
								form={ fmt.Sprintf("ingredient-form-%d", ingredient.Ingredient.ID) }
								name="type"
								id={ fmt.Sprintf("type-%d", ingredient.Ingredient.ID) }
								disabled
							>
								if len(ingredient.Prices) > 0 && ingredient.Prices[0].BaseProductID != nil {
									<option>Product</option>
								} else {
									<option>Base Ingredient</option>
								}
							</select>
						</div>
					</div>
				</div>
			</div>
			<div
				class="column"
				id={ fmt.Sprintf("ingredient-%d-price", ingredient.Ingredient.ID) }
			>
				<div class="field">
					<label class="label is-hidden-tablet product-label">Price / Base Product</label>
					if len(ingredient.Prices) > 0 && ingredient.Prices[0].BaseProductID != nil {
						<div class="control is-expanded">
							<div class="select is-fullwidth">
								<select disabled>
									<option>
										{ products[*ingredient.Prices[0].BaseProductID] }
									</option>
								</select>
							</div>
						</div>
					} else {
						<div class="field has-addons">
							<p class="control is-expanded">
								<input
									class="input"
									type="text"
									disabled
									if len(ingredient.Prices) > 0 && ingredient.Prices[0].Price != nil {
										value={ fmt.Sprintf("%.2f", (*ingredient.Prices[0].Price/units[ingredient.Prices[0].UnitID].Factor)*ingredient.Prices[0].Quantity) }
									} else {
										value=""
									}
								/>
							</p>
							<p class="control">
								<a class="button is-static">€</a>
							</p>
						</div>
					}
				</div>
			</div>
			<div class="column">
				<div class="field">
					<label class="label is-hidden-tablet product-label">Per</label>
					<div class="field has-addons">
						<p class="control is-expanded">
							<input
								class="input"
								type="text"
								disabled
								if len(ingredient.Prices) > 0 {
									value={ fmt.Sprintf("%.2f", ingredient.Prices[0].Quantity) }
								} else {
									value="N/A"
								}
							/>
						</p>
						if len(ingredient.Prices) > 0 {
							<p class="control">
								<a class="button is-static">{ units[ingredient.Prices[0].UnitID].Name }</a>
							</p>
						}
					</div>
				</div>
			</div>
			<div class="column responsive-buttons">
				<button
					class="button"
					hx-get={ fmt.Sprintf("/ingredient/%d/edit", ingredient.Ingredient.ID) }
					hx-target="closest .block"
					hx-swap="outerHTML"
				>
					Edit
				</button>
			</div>
		</div>
	</div>
}

templ IngredientRowEdit(ingredient db.IngredientWithPrices, units services.UnitsMap, products map[int64]string) {
	<div
		class="block"
		x-data={ fmt.Sprintf(`{ type: '%s' }`, 
    func() string {
        if len(ingredient.Prices) > 0 && ingredient.Prices[0].BaseProductID != nil {
            return "product"
        }
        return "price"
    }(),
) }
	>
		<div class="columns  is-align-items-flex-end">
			<div class="column">
				<div class="field">
					<label class="label is-hidden-tablet product-label">Name</label>
					<div class="control">
						<input
							class="input"
							type="text"
							value={ ingredient.Ingredient.Name }
							form={ fmt.Sprintf("ingredient-form-%d", ingredient.Ingredient.ID) }
							name="name"
						/>
					</div>
				</div>
			</div>
			<div
				class="column"
			>
				<div class="field">
					<label class="label is-hidden-tablet product-label">Type</label>
					<div class="control is-expanded">
						<div class="select is-fullwidth">
							<select
								form={ fmt.Sprintf("ingredient-form-%d", ingredient.Ingredient.ID) }
								name="type"
								id={ fmt.Sprintf("type-%d", ingredient.Ingredient.ID) }
								x-model="type"
							>
								<option value="price">Base Ingredient</option>
								<option value="product">Product</option>
							</select>
						</div>
					</div>
				</div>
			</div>
			<div
				class="column"
				x-show="type === 'price'"
			>
				<div class="field">
					<label class="label is-hidden-tablet product-label">Price / Base Product</label>
					<div class="field has-addons">
						<p class="control is-expanded">
							<input
								class="input"
								type="text"
								form={ fmt.Sprintf("ingredient-form-%d", ingredient.Ingredient.ID) }
								name="price"
								if len(ingredient.Prices) > 0 && ingredient.Prices[0].Price != nil {
									value={ fmt.Sprintf("%.2f", (*ingredient.Prices[0].Price/units[ingredient.Prices[0].UnitID].Factor)*ingredient.Prices[0].Quantity) }
								} else {
									value=""
								}
							/>
						</p>
						<p class="control">
							<a class="button is-static">€</a>
						</p>
					</div>
				</div>
			</div>
			<div
				class="column"
				x-show="type === 'product'"
			>
				<div class="field">
					<label class="label is-hidden-tablet product-label">Price / Base Product</label>
					<p class="control is-expanded">
						<div class="select is-fullwidth">
							<select
								form={ fmt.Sprintf("ingredient-form-%d", ingredient.Ingredient.ID) }
								name="base-product-id"
							>
								for i, product := range products {
									<option
										value={ fmt.Sprintf("%d", i) }
										selected?={ len(ingredient.Prices) > 0 && ingredient.Prices[0].BaseProductID != nil && i == *ingredient.Prices[0].BaseProductID }
									>
										{ product }
									</option>
								}
							</select>
						</div>
					</p>
				</div>
			</div>
			<div class="column">
				<div class="field">
					<label class="label is-hidden-tablet product-label">Per</label>
					<div class="field has-addons">
						<p class="control is-expanded">
							<input
								class="input is-fullwidth"
								type="text"
								form={ fmt.Sprintf("ingredient-form-%d", ingredient.Ingredient.ID) }
								if len(ingredient.Prices) > 0 {
									value={ fmt.Sprintf("%.2f", ingredient.Prices[0].Quantity) }
								} else {
									value=""
								}
								name="quantity"
								id={ fmt.Sprintf("amount-%d", ingredient.Ingredient.ID) }
								data-ingredient-id={ fmt.Sprintf("%d", ingredient.Ingredient.ID) }
							/>
						</p>
						<p class="control">
							<span class="select">
								<select
									form={ fmt.Sprintf("ingredient-form-%d", ingredient.Ingredient.ID) }
									name="unit"
									id={ fmt.Sprintf("unit-%d", ingredient.Ingredient.ID) }
									data-ingredient-id={ fmt.Sprintf("%d", ingredient.Ingredient.ID) }
								>
									for _, unit := range(units) {
										<option
											selected?={ len(ingredient.Prices) > 0 && ingredient.Prices[0].UnitID == unit.ID }
											value={ fmt.Sprintf("%d", unit.ID) }
										>{ unit.Name }</option>
									}
								</select>
							</span>
						</p>
					</div>
				</div>
			</div>
			<div class="column">
				<form
					id={ fmt.Sprintf("ingredient-form-%d", ingredient.Ingredient.ID) }
					class="responsive-buttons"
				>
					<button
						type="submit"
						class="button is-link"
						hx-put={ fmt.Sprintf("/ingredient-price/%d", ingredient.Ingredient.ID) }
						hx-target="closest .block"
						hx-swap="outerHTML"
						title="Save"
					>
						<span class="is-hidden-tablet">Save</span>
						<i class="fas fa-check fa-fw is-hidden-mobile"></i>
					</button>
					<button
						class="button"
						hx-get={ fmt.Sprintf("/ingredient/%d", ingredient.Ingredient.ID) }
						hx-target="closest .block"
						hx-swap="outerHTML"
						title="Cancel"
					>
						<span class="is-hidden-tablet">Cancel</span>
						<i class="fas fa-times fa-fw is-hidden-mobile"></i>
					</button>
					<button
						class="button is-danger"
						hx-delete={ fmt.Sprintf("/ingredient/%d", ingredient.Ingredient.ID) }
						hx-target="closest .block"
						hx-swap="outerHTML"
						title="Delete"
					>
						<span class="is-hidden-tablet">Delete</span>
						<i class="fas fa-trash fa-fw is-hidden-mobile"></i>
					</button>
				</form>
			</div>
		</div>
	</div>
}
