name: Build and Push Docker Image

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

permissions:
  contents: read
  packages: write

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    env:
      GOOS: linux
      CGO_ENABLED: 0

    steps:
      - name: Generate Code
        uses: ./.github/actions/codegen

      - name: Build Go binary
        run: |
          mkdir -p dist/${{ matrix.arch }}
          GOARCH=${{ matrix.arch }} \
          CC=${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-gcc' || 'gcc' }} \
          go build -o dist/${{ matrix.arch }}/main .

      - name: Set image tags
        id: vars
        run: |
          IMAGE=ghcr.io/${{ github.repository }}
          TAGS=()

          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            TAGS+=("${IMAGE}:${VERSION}")
            TAGS+=("${IMAGE}:latest")
          else
            SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            TAGS+=("${IMAGE}:${SHORT_SHA}")
            TAGS+=("${IMAGE}:dev")
          fi

          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          { printf "tags<<EOF\n"; printf "%s\n" "${TAGS[@]}"; echo "EOF"; } >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.vars.outputs.tags }}
          platforms: linux/${{ matrix.arch }}
          build-args: |
            TARGETARCH=${{ matrix.arch }}

